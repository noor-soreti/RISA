import { createSlice } from "@reduxjs/toolkit"
import { loginUser, registerUser } from "./userThunk";

const initialState = {
    user: null,
    loading: false,
    error: null
}

const userSlice = createSlice({
    name: 'user',
    initialState,
    reducers: {
      loginStart: (state) => {
        state.loading = true;
        state.error = null;
      },
      loginSuccess: (state, action) => {
        state.loading = false;
        state.user = action.payload;  // action.payload will contain the user data
      },
      loginFailure: (state, action) => {
        state.loading = false;
        state.error = action.payload;  // store error message
      },
      logout: (state) => {
        state.user = null;  // Clear user state on logout
      },
    },
    // extraReducers -> let's you respond to actions defined outside of the slice (i.e. actions generated by thunks)
    extraReducers: (builder) => {
        builder // adds case for each action type generated by thunk

        // login
        .addCase(loginUser.pending, (state) => {
            state.loading = true
            state.error = null
        })
        .addCase(loginUser.fulfilled, (state, action) => {
            state.loading = false
            state.user = action.payload
        })
        .addCase(loginUser.rejected, (state, action) => {
            state.loading = false
            state.user = action.payload
        })

        // register 
        .addCase(registerUser.pending, (state) => {
            state.loading = true
            state.error = null
        })
        .addCase(registerUser.fulfilled, (state, action) => {
            state.loading = false
            state.user = action.payload
        })
        .addCase(registerUser.rejected, (state, action) => {
            state.loading = false
            state.user = action.payload
        })
    }
  });

export const { loginStart, loginSuccess, loginFailure, logout } = userSlice.actions
export default userSlice.reducer